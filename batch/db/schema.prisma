// This is your Prisma schema file for this service,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters", "metrics"]
    binaryTargets   = ["native", "debian-openssl-3.0.x"]
    output          = "./client"
}

generator json {
    provider     = "prisma-json-types-generator"
    engineType   = "library"
    clientOutput = "./client"
}

generator docs {
    provider = "node node_modules/prisma-docs-generator"
    output   = "./docs"
}

generator markdown {
    provider = "prisma-markdown"
    output   = "./README.md"
    title    = "Batch Service DB"
    namespace = "`batch`"
}

generator typescriptInterfaces {
    provider      = "prisma-generator-typescript-interfaces"
    modelType     = "type"
    enumType      = "object"
    headerComment = "DO NOT EDIT — Auto-generated file; see https://github.com/mogzol/prisma-generator-typescript-interfaces"
    modelSuffix   = "Model"
    output        = "./models/db.ts"
    prettier      = true
}

generator typescriptInterfacesJson {
    provider      = "prisma-generator-typescript-interfaces"
    modelType     = "type"
    enumType      = "stringUnion"
    enumPrefix    = "$"
    headerComment = "DO NOT EDIT — Auto-generated file; see https://github.com/mogzol/prisma-generator-typescript-interfaces"
    output        = "./models/dto.ts"
    modelSuffix   = "Dto"
    dateType      = "string"
    bigIntType    = "string"
    decimalType   = "string"
    bytesType     = "ArrayObject"
    prettier      = true
}

datasource db {
    provider = "postgresql"
    url      = env("BATCH_DATABASE_URL")
}

/// Represents a batch of processing tasks
/// @namespace ProcessingBatch
model ProcessingBatch {
    id              String           @id @default(cuid())
    name            String?
    /// Type of batch (media, document, transcription, etc.)
    batchType       BatchType
    /// queued, processing, completed, completed_with_errors, failed
    status          JobStatus
    totalTasks      Int              @default(0)
    completedTasks  Int              @default(0)
    failedTasks     Int              @default(0)
    queuedTasks     Int              @default(0)
    processingTasks Int              @default(0)
    priority        Int              @default(0)
    ///[BatchMetadataJSON]
    metadata        Json? // Additional metadata about the batch
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    tasks           ProcessingTask[]

    @@index([status, priority, createdAt])
}

/// Represents a single processing task within a batch
/// @namespace ProcessingTask
model ProcessingTask {
    id              String           @id @default(cuid())
    batchId         String?
    batch           ProcessingBatch? @relation(fields: [batchId], references: [id])
    taskType        TaskType // Type of task to perform
    status          JobStatus // queued, processing, completed, failed
    retryCount      Int              @default(0)
    maxRetries      Int              @default(3)
    priority        Int              @default(0)
    ///[TaskInputJSON]
    input           Json // Input parameters for the task
    ///[TaskOutputJSON]
    output          Json? // Output results from the task
    error           String? // Error message if the task failed
    meetingRecordId String? // Optional reference to a meeting record
    startedAt       DateTime? // When processing started
    completedAt     DateTime? // When processing completed
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt

    // Task dependencies - tasks that must complete before this one can start
    dependsOn    TaskDependency[] @relation("DependentTask")
    dependencies TaskDependency[] @relation("DependencyTask")

    @@index([batchId, status])
    @@index([status, priority, createdAt])
    @@index([meetingRecordId])
}

/// Represents a dependency between tasks
/// @namespace TaskDependency
model TaskDependency {
    id               String         @id @default(cuid())
    dependentTaskId  String // The task that depends on another
    dependentTask    ProcessingTask @relation("DependentTask", fields: [dependentTaskId], references: [id])
    dependencyTaskId String // The task that must complete first
    dependencyTask   ProcessingTask @relation("DependencyTask", fields: [dependencyTaskId], references: [id])
    createdAt        DateTime       @default(now())

    @@unique([dependentTaskId, dependencyTaskId])
}

/// Represents a webhook endpoint for batch event notifications
/// @namespace WebhookSubscription
model WebhookSubscription {
    id         String      @id @default(cuid())
    name       String
    url        String
    secret     String? // For signing the webhook requests
    eventTypes EventType[] // Which events to send ("batch-created", "task-completed", "batch-status-changed")
    active     Boolean     @default(true)
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    @@index([active])
}

/// Tracks the delivery of webhook notifications
/// @namespace WebhookDelivery
model WebhookDelivery {
    id              String    @id @default(cuid())
    webhookId       String
    eventType       String
    ///[WebhookPayloadJSON]
    payload         Json
    responseStatus  Int?
    responseBody    String?
    error           String?
    attempts        Int       @default(0)
    successful      Boolean   @default(false)
    scheduledFor    DateTime  @default(now())
    lastAttemptedAt DateTime?
    createdAt       DateTime  @default(now())

    @@index([webhookId, successful])
    @@index([successful, scheduledFor])
}

/// @namespace enums
enum JobStatus {
    QUEUED
    PROCESSING
    COMPLETED
    COMPLETED_WITH_ERRORS
    FAILED
}

/// @namespace enums
enum BatchType {
    MEDIA
    DOCUMENT
    TRANSCRIPTION
}

/// @namespace enums
enum TaskType {
    DOCUMENT_DOWNLOAD
    DOCUMENT_CONVERT
    DOCUMENT_EXTRACT
    DOCUMENT_PARSE
    AGENDA_DOWNLOAD
    VIDEO_DOWNLOAD
    VIDEO_PROCESS
    AUDIO_EXTRACT
    AUDIO_TRANSCRIBE
    SPEAKER_DIARIZE
    TRANSCRIPT_FORMAT
}

/// @namespace enums
enum EventType {
    BATCH_CREATED
    TASK_COMPLETED
    BATCH_STATUS_CHANGED
}
